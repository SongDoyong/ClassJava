/*
		@ 클래스 구성 요소
		class ClassName
		{
		-------------------------------------------------------------------
			변수(인스턴스, 멤버, 공유 변수)
				= 따로 저장되는 변수 (인스턴스 => new필요)
				= 공통 저장되는 변수 (컴파일러에 의해 자동 생성) => 한 개의 메모리만 생성
		-------------------------------------------------------------------
			메소드(멤버메소드) => static이 없는 메소드
		-------------------------------------------------------------------
			생성자: 멤버변수의 초기화 / 객체 생성시에 호출되는 메소드
		-------------------------------------------------------------------
		}
				★★★★ class 블럭에서는 연산자, 제어문을 사용할 수 없음 ★★★★	
						=> 선언만 가능	(단, 선언과 동시에 변수값 설정은 가능 int i=100; (O))
																int i; i=100; (X)

		-------------------------------------------------------------------
		
		@ 객체지향 프로그램 (Object Oriented Program)
			=> 여러 개의클래스를 만들어서 조합하는 프로그램 (Component B Development)
			ex) 웹 사이트
				회원: 회원가입 / 회원탈퇴 / 회원수정 / 로그인 / 로그아웃 / 아이디찾기 ....
				게시판: 글쓰기 / 수정 / 삭제 / 상세보기 ...
				맛집: 목록출력 / 상세보기 / 댓글작성 / 찾기 / 추천 / 예약 ...
				--- 부품(클래스) 
		
		@ 객체지향의 객체: 물리적으로 존재하는 것 (눈에 보이는 것)
							ex) 자동차, 사람, 책 ...
								----
								종류, 속도, 색상, 번호 등등...		( 변수 )
								이동하기, 속도 높이기, 속도 줄이기 ... ( 메소드 )
						
						추상적으로 존재하는 것 (눈에 보이지 않는 것)
							ex) 회사, 날씨, 동물, 게임 ...	(속성과 동작 필요)
			
				==> 자바에서 변수와 메소드로 객체를 표현
					
		@ 객체지향 => 클래스 간 상호작용
		  결과값 응답	(메소드)
		사람 --> 계산기
	   actor
		요청	(메소드)
		
		class 사람	(actor)
		{
			계산기
		}
		class 계산기
		{
		}
					
		객체와 클래스
		설계 ===> 집 완성
		설계 ===> 완성 (활용) (메모리에 저장)
		---		----------
		클래스			===> 객체
		class			new className()	=> 객체.메소드or변수
		{
			변수, 메소드...
		}
		
		클래스로부터 객체를 생성하기 위해서는 변수 / 메소드가 정의되어있어야 함
		
		클래스를 저장하면 인스턴스(객체)
		A 	a	=	new A()
	클래스명 	객체명
		int a=10
			변수명
		
		=> 하나의 클래스로부터 여러 개의 객체 생성이 가능함
		=> 클래스는 한 개에 대한 정보를 가지고 있음
		=> 데이터를 따로 저장하기 위해서는 new 연산자를 이용한다
			-> new는 새로운 메모리 공간을 만들어줌
			-> 사용법
				new 클래스명()
				class A
				1)A a=new A()
				2)A a;
				  a=new A()
		
		ex) class A			==> 12byte  static은 별도 저장이므로
			{
				int a;
				int b;
				String s;			// String 4byte	
				static int d;
			}
		
		  객체지향의 특성: 캡슐화, 다형성, 추상화, 상속
		
		
		

*/

public class _06_클래스_변수정리
{
	public static void main(String[] args)
	{
		
	}
}
